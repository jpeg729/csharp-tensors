using System;
using Xunit;
using Tensors;
using System.Collections.Generic;

namespace Tensors.Test
{
    public class TensorTestsWithShape2453
    {
        Tensor t;
        public TensorTestsWithShape2453() => t = new Tensor(new int[] { 2, 4, 5, 3 });

        [Fact]
        public void TestCreateWithSizes()
        {
            Assert.True(t.size == 2 * 4 * 5 * 3);
            Assert.True(t.rank == 4);
            Assert.True(t.shapeStr == "(2,4,5,3)");
            Assert.True(t.ContentsToString(true) == "0,0:;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;0,1:;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;0,2:;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;0,3:;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;1,0:;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;1,1:;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;1,2:;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0;1,3:;0,0,0;0,0,0;0,0,0;0,0,0;0,0,0");
        }

        [Fact]
        public void TestFillValue()
        {
            t.Fill_(5);
            Assert.True(t.ContentsToString(true) == "0,0:;5,5,5;5,5,5;5,5,5;5,5,5;5,5,5;0,1:;5,5,5;5,5,5;5,5,5;5,5,5;5,5,5;0,2:;5,5,5;5,5,5;5,5,5;5,5,5;5,5,5;0,3:;5,5,5;5,5,5;5,5,5;5,5,5;5,5,5;1,0:;5,5,5;5,5,5;5,5,5;5,5,5;5,5,5;1,1:;5,5,5;5,5,5;5,5,5;5,5,5;5,5,5;1,2:;5,5,5;5,5,5;5,5,5;5,5,5;5,5,5;1,3:;5,5,5;5,5,5;5,5,5;5,5,5;5,5,5");
        }

        [Fact]
        public void TestFillRange()
        {
            t.FillWithRange_();
            Assert.True(t.ContentsToString(true) == "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;12,13,14;0,1:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;0,2:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;0,3:;45,46,47;48,49,50;51,52,53;54,55,56;57,58,59;1,0:;60,61,62;63,64,65;66,67,68;69,70,71;72,73,74;1,1:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89;1,2:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104;1,3:;105,106,107;108,109,110;111,112,113;114,115,116;117,118,119");
        }

        [Fact]
        public void TestMean()
        {
            Assert.True(t.Mean().Current == 0);
            t.Fill_(5);
            Assert.True(t.Mean().Current == 5);
            t.FillWithRange_();
            Assert.True(t.Mean().Current == 59.5);
        }

        [Fact]
        public void TestTranspose()
        {
            t.FillWithRange_();
            Assert.True(t.T().ContentsToString(true) == "0,0:;0,3,6,9,12;1,4,7,10,13;2,5,8,11,14;0,1:;15,18,21,24,27;16,19,22,25,28;17,20,23,26,29;0,2:;30,33,36,39,42;31,34,37,40,43;32,35,38,41,44;0,3:;45,48,51,54,57;46,49,52,55,58;47,50,53,56,59;1,0:;60,63,66,69,72;61,64,67,70,73;62,65,68,71,74;1,1:;75,78,81,84,87;76,79,82,85,88;77,80,83,86,89;1,2:;90,93,96,99,102;91,94,97,100,103;92,95,98,101,104;1,3:;105,108,111,114,117;106,109,112,115,118;107,110,113,116,119");
            Assert.True(t.T().T().CloseTo(t));
        }

        [Theory]
        [InlineData(0, 1, 2, 3)]
        [InlineData(0, 2, 1, 3)]
        [InlineData(1, 2, 0, 3)]
        [InlineData(1, 0, 2, 3)]
        [InlineData(2, 0, 1, 3)]
        [InlineData(2, 1, 0, 3)]
        [InlineData(0, 1, 3, 2)]
        [InlineData(0, 2, 3, 1)]
        [InlineData(1, 2, 3, 0)]
        [InlineData(1, 0, 3, 2)]
        [InlineData(2, 0, 3, 1)]
        [InlineData(2, 1, 3, 0)]
        [InlineData(0, 3, 1, 2)]
        [InlineData(0, 3, 2, 1)]
        [InlineData(1, 3, 2, 0)]
        [InlineData(1, 3, 0, 2)]
        [InlineData(2, 3, 0, 1)]
        [InlineData(2, 3, 1, 0)]
        [InlineData(3, 0, 1, 2)]
        [InlineData(3, 0, 2, 1)]
        [InlineData(3, 1, 2, 0)]
        [InlineData(3, 1, 0, 2)]
        [InlineData(3, 2, 0, 1)]
        [InlineData(3, 2, 1, 0)]
        public void TestUnPermute(params int[] order)
        {
            t.FillWithRange_();
            var t2 = t.Permute(order).Permute(Tensor.UnPermuteOrder(order));
            Assert.True(t.ContentsToString(true) == t2.ContentsToString(true));
        }

        [Theory]
        [InlineData(0, 0, 1, "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;12,13,14;0,1:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;0,2:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;0,3:;45,46,47;48,49,50;51,52,53;54,55,56;57,58,59")]
        [InlineData(0, 1, 1, "0,0:;60,61,62;63,64,65;66,67,68;69,70,71;72,73,74;0,1:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89;0,2:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104;0,3:;105,106,107;108,109,110;111,112,113;114,115,116;117,118,119")]
        [InlineData(0, 0, 2, "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;12,13,14;0,1:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;0,2:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;0,3:;45,46,47;48,49,50;51,52,53;54,55,56;57,58,59;1,0:;60,61,62;63,64,65;66,67,68;69,70,71;72,73,74;1,1:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89;1,2:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104;1,3:;105,106,107;108,109,110;111,112,113;114,115,116;117,118,119")]
        [InlineData(1, 0, 1, "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;12,13,14;1,0:;60,61,62;63,64,65;66,67,68;69,70,71;72,73,74")]
        [InlineData(1, 1, 1, "0,0:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;1,0:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89")]
        [InlineData(1, 2, 1, "0,0:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;1,0:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104")]
        [InlineData(1, 3, 1, "0,0:;45,46,47;48,49,50;51,52,53;54,55,56;57,58,59;1,0:;105,106,107;108,109,110;111,112,113;114,115,116;117,118,119")]
        [InlineData(1, 0, 2, "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;12,13,14;0,1:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;1,0:;60,61,62;63,64,65;66,67,68;69,70,71;72,73,74;1,1:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89")]
        [InlineData(1, 1, 2, "0,0:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;0,1:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;1,0:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89;1,1:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104")]
        [InlineData(1, 2, 2, "0,0:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;0,1:;45,46,47;48,49,50;51,52,53;54,55,56;57,58,59;1,0:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104;1,1:;105,106,107;108,109,110;111,112,113;114,115,116;117,118,119")]
        [InlineData(1, 0, 3, "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;12,13,14;0,1:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;0,2:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;1,0:;60,61,62;63,64,65;66,67,68;69,70,71;72,73,74;1,1:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89;1,2:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104")]
        [InlineData(1, 1, 3, "0,0:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;0,1:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;0,2:;45,46,47;48,49,50;51,52,53;54,55,56;57,58,59;1,0:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89;1,1:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104;1,2:;105,106,107;108,109,110;111,112,113;114,115,116;117,118,119")]
        [InlineData(1, 0, 4, "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;12,13,14;0,1:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;0,2:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;0,3:;45,46,47;48,49,50;51,52,53;54,55,56;57,58,59;1,0:;60,61,62;63,64,65;66,67,68;69,70,71;72,73,74;1,1:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89;1,2:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104;1,3:;105,106,107;108,109,110;111,112,113;114,115,116;117,118,119")]
        [InlineData(2, 0, 1, "0,0:;0,1,2;0,1:;15,16,17;0,2:;30,31,32;0,3:;45,46,47;1,0:;60,61,62;1,1:;75,76,77;1,2:;90,91,92;1,3:;105,106,107")]
        [InlineData(2, 1, 1, "0,0:;3,4,5;0,1:;18,19,20;0,2:;33,34,35;0,3:;48,49,50;1,0:;63,64,65;1,1:;78,79,80;1,2:;93,94,95;1,3:;108,109,110")]
        [InlineData(2, 2, 1, "0,0:;6,7,8;0,1:;21,22,23;0,2:;36,37,38;0,3:;51,52,53;1,0:;66,67,68;1,1:;81,82,83;1,2:;96,97,98;1,3:;111,112,113")]
        [InlineData(2, 3, 1, "0,0:;9,10,11;0,1:;24,25,26;0,2:;39,40,41;0,3:;54,55,56;1,0:;69,70,71;1,1:;84,85,86;1,2:;99,100,101;1,3:;114,115,116")]
        [InlineData(2, 4, 1, "0,0:;12,13,14;0,1:;27,28,29;0,2:;42,43,44;0,3:;57,58,59;1,0:;72,73,74;1,1:;87,88,89;1,2:;102,103,104;1,3:;117,118,119")]
        [InlineData(2, 0, 2, "0,0:;0,1,2;3,4,5;0,1:;15,16,17;18,19,20;0,2:;30,31,32;33,34,35;0,3:;45,46,47;48,49,50;1,0:;60,61,62;63,64,65;1,1:;75,76,77;78,79,80;1,2:;90,91,92;93,94,95;1,3:;105,106,107;108,109,110")]
        [InlineData(2, 1, 2, "0,0:;3,4,5;6,7,8;0,1:;18,19,20;21,22,23;0,2:;33,34,35;36,37,38;0,3:;48,49,50;51,52,53;1,0:;63,64,65;66,67,68;1,1:;78,79,80;81,82,83;1,2:;93,94,95;96,97,98;1,3:;108,109,110;111,112,113")]
        [InlineData(2, 2, 2, "0,0:;6,7,8;9,10,11;0,1:;21,22,23;24,25,26;0,2:;36,37,38;39,40,41;0,3:;51,52,53;54,55,56;1,0:;66,67,68;69,70,71;1,1:;81,82,83;84,85,86;1,2:;96,97,98;99,100,101;1,3:;111,112,113;114,115,116")]
        [InlineData(2, 3, 2, "0,0:;9,10,11;12,13,14;0,1:;24,25,26;27,28,29;0,2:;39,40,41;42,43,44;0,3:;54,55,56;57,58,59;1,0:;69,70,71;72,73,74;1,1:;84,85,86;87,88,89;1,2:;99,100,101;102,103,104;1,3:;114,115,116;117,118,119")]
        [InlineData(2, 0, 3, "0,0:;0,1,2;3,4,5;6,7,8;0,1:;15,16,17;18,19,20;21,22,23;0,2:;30,31,32;33,34,35;36,37,38;0,3:;45,46,47;48,49,50;51,52,53;1,0:;60,61,62;63,64,65;66,67,68;1,1:;75,76,77;78,79,80;81,82,83;1,2:;90,91,92;93,94,95;96,97,98;1,3:;105,106,107;108,109,110;111,112,113")]
        [InlineData(2, 1, 3, "0,0:;3,4,5;6,7,8;9,10,11;0,1:;18,19,20;21,22,23;24,25,26;0,2:;33,34,35;36,37,38;39,40,41;0,3:;48,49,50;51,52,53;54,55,56;1,0:;63,64,65;66,67,68;69,70,71;1,1:;78,79,80;81,82,83;84,85,86;1,2:;93,94,95;96,97,98;99,100,101;1,3:;108,109,110;111,112,113;114,115,116")]
        [InlineData(2, 2, 3, "0,0:;6,7,8;9,10,11;12,13,14;0,1:;21,22,23;24,25,26;27,28,29;0,2:;36,37,38;39,40,41;42,43,44;0,3:;51,52,53;54,55,56;57,58,59;1,0:;66,67,68;69,70,71;72,73,74;1,1:;81,82,83;84,85,86;87,88,89;1,2:;96,97,98;99,100,101;102,103,104;1,3:;111,112,113;114,115,116;117,118,119")]
        [InlineData(2, 0, 4, "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;0,1:;15,16,17;18,19,20;21,22,23;24,25,26;0,2:;30,31,32;33,34,35;36,37,38;39,40,41;0,3:;45,46,47;48,49,50;51,52,53;54,55,56;1,0:;60,61,62;63,64,65;66,67,68;69,70,71;1,1:;75,76,77;78,79,80;81,82,83;84,85,86;1,2:;90,91,92;93,94,95;96,97,98;99,100,101;1,3:;105,106,107;108,109,110;111,112,113;114,115,116")]
        [InlineData(2, 1, 4, "0,0:;3,4,5;6,7,8;9,10,11;12,13,14;0,1:;18,19,20;21,22,23;24,25,26;27,28,29;0,2:;33,34,35;36,37,38;39,40,41;42,43,44;0,3:;48,49,50;51,52,53;54,55,56;57,58,59;1,0:;63,64,65;66,67,68;69,70,71;72,73,74;1,1:;78,79,80;81,82,83;84,85,86;87,88,89;1,2:;93,94,95;96,97,98;99,100,101;102,103,104;1,3:;108,109,110;111,112,113;114,115,116;117,118,119")]
        [InlineData(2, 0, 5, "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;12,13,14;0,1:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;0,2:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;0,3:;45,46,47;48,49,50;51,52,53;54,55,56;57,58,59;1,0:;60,61,62;63,64,65;66,67,68;69,70,71;72,73,74;1,1:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89;1,2:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104;1,3:;105,106,107;108,109,110;111,112,113;114,115,116;117,118,119")]
        [InlineData(3, 0, 1, "0,0:;0;3;6;9;12;0,1:;15;18;21;24;27;0,2:;30;33;36;39;42;0,3:;45;48;51;54;57;1,0:;60;63;66;69;72;1,1:;75;78;81;84;87;1,2:;90;93;96;99;102;1,3:;105;108;111;114;117")]
        [InlineData(3, 1, 1, "0,0:;1;4;7;10;13;0,1:;16;19;22;25;28;0,2:;31;34;37;40;43;0,3:;46;49;52;55;58;1,0:;61;64;67;70;73;1,1:;76;79;82;85;88;1,2:;91;94;97;100;103;1,3:;106;109;112;115;118")]
        [InlineData(3, 2, 1, "0,0:;2;5;8;11;14;0,1:;17;20;23;26;29;0,2:;32;35;38;41;44;0,3:;47;50;53;56;59;1,0:;62;65;68;71;74;1,1:;77;80;83;86;89;1,2:;92;95;98;101;104;1,3:;107;110;113;116;119")]
        [InlineData(3, 0, 2, "0,0:;0,1;3,4;6,7;9,10;12,13;0,1:;15,16;18,19;21,22;24,25;27,28;0,2:;30,31;33,34;36,37;39,40;42,43;0,3:;45,46;48,49;51,52;54,55;57,58;1,0:;60,61;63,64;66,67;69,70;72,73;1,1:;75,76;78,79;81,82;84,85;87,88;1,2:;90,91;93,94;96,97;99,100;102,103;1,3:;105,106;108,109;111,112;114,115;117,118")]
        [InlineData(3, 1, 2, "0,0:;1,2;4,5;7,8;10,11;13,14;0,1:;16,17;19,20;22,23;25,26;28,29;0,2:;31,32;34,35;37,38;40,41;43,44;0,3:;46,47;49,50;52,53;55,56;58,59;1,0:;61,62;64,65;67,68;70,71;73,74;1,1:;76,77;79,80;82,83;85,86;88,89;1,2:;91,92;94,95;97,98;100,101;103,104;1,3:;106,107;109,110;112,113;115,116;118,119")]
        [InlineData(3, 0, 3, "0,0:;0,1,2;3,4,5;6,7,8;9,10,11;12,13,14;0,1:;15,16,17;18,19,20;21,22,23;24,25,26;27,28,29;0,2:;30,31,32;33,34,35;36,37,38;39,40,41;42,43,44;0,3:;45,46,47;48,49,50;51,52,53;54,55,56;57,58,59;1,0:;60,61,62;63,64,65;66,67,68;69,70,71;72,73,74;1,1:;75,76,77;78,79,80;81,82,83;84,85,86;87,88,89;1,2:;90,91,92;93,94,95;96,97,98;99,100,101;102,103,104;1,3:;105,106,107;108,109,110;111,112,113;114,115,116;117,118,119")]
        public void TestSlice(int dim, int start, int count, string result)
        {
            t.FillWithRange_();
            t = t.Slice(dim, start, count);
            Assert.True(t.ContentsToString(true) == result);
        }
    }

    public class TensorTestsWithShape245
    {
        Tensor t;
        public TensorTestsWithShape245() => t = new Tensor(new int[] { 2, 4, 5 });

        [Fact]
        public void TestCreateWithSizes()
        {
            Assert.True(t.size == 2 * 4 * 5);
            Assert.True(t.rank == 3);
            Assert.True(t.shapeStr == "(2,4,5)");
            Assert.True(t.ContentsToString(true) == "0:;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;1:;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0;0,0,0,0,0");
        }

        [Fact]
        public void TestFillValue()
        {
            t.Fill_(5);
            Assert.True(t.ContentsToString(true) == "0:;5,5,5,5,5;5,5,5,5,5;5,5,5,5,5;5,5,5,5,5;1:;5,5,5,5,5;5,5,5,5,5;5,5,5,5,5;5,5,5,5,5");
        }

        [Fact]
        public void TestFillRange()
        {
            t.FillWithRange_();
            Assert.True(t.ContentsToString(true) == "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39");
        }

        [Fact]
        public void TestMean()
        {
            Assert.True(t.Mean().Current == 0);
            t.Fill_(5);
            Assert.True(t.Mean().Current == 5);
            t.FillWithRange_();
            Assert.True(t.Mean().Current == 19.5);
        }

        [Fact]
        public void TestTranspose()
        {
            t.FillWithRange_();
            Assert.True(t.T().ContentsToString(true) == "0:;0,5,10,15;1,6,11,16;2,7,12,17;3,8,13,18;4,9,14,19;1:;20,25,30,35;21,26,31,36;22,27,32,37;23,28,33,38;24,29,34,39");
            Assert.True(t.T().T().CloseTo(t));
        }

        [Fact]
        public void TestPermute()
        {
            t.FillWithRange_();
            t = t.Permute(1, 0, 2);
            Assert.True(t.ContentsToString(true) == "0:;0,1,2,3,4;20,21,22,23,24;1:;5,6,7,8,9;25,26,27,28,29;2:;10,11,12,13,14;30,31,32,33,34;3:;15,16,17,18,19;35,36,37,38,39");
            t = t.Permute(Tensor.UnPermuteOrder(1, 0, 2));
            Assert.True(t.ContentsToString(true) == "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39");
            t = t.Permute(1, 2, 0);
            Assert.True(t.ContentsToString(true) == "0:;0,20;1,21;2,22;3,23;4,24;1:;5,25;6,26;7,27;8,28;9,29;2:;10,30;11,31;12,32;13,33;14,34;3:;15,35;16,36;17,37;18,38;19,39");
        }

        [Theory]
        [InlineData(0, 1, 2)]
        [InlineData(0, 2, 1)]
        [InlineData(1, 2, 0)]
        [InlineData(1, 0, 2)]
        [InlineData(2, 0, 1)]
        [InlineData(2, 1, 0)]
        public void TestUnPermute(params int[] order)
        {
            t.FillWithRange_();
            var t2 = t.Permute(order).Permute(Tensor.UnPermuteOrder(order));
            Assert.True(t.ContentsToString(true) == t2.ContentsToString(true));
        }

        [Theory]
        [InlineData(0, 0, 1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19")]
        [InlineData(0, 1, 1, "0:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(0, 0, 2, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(1, 0, 1, "0:;0,1,2,3,4;1:;20,21,22,23,24")]
        [InlineData(1, 1, 1, "0:;5,6,7,8,9;1:;25,26,27,28,29")]
        [InlineData(1, 2, 1, "0:;10,11,12,13,14;1:;30,31,32,33,34")]
        [InlineData(1, 3, 1, "0:;15,16,17,18,19;1:;35,36,37,38,39")]
        [InlineData(1, 0, 2, "0:;0,1,2,3,4;5,6,7,8,9;1:;20,21,22,23,24;25,26,27,28,29")]
        [InlineData(1, 1, 2, "0:;5,6,7,8,9;10,11,12,13,14;1:;25,26,27,28,29;30,31,32,33,34")]
        [InlineData(1, 2, 2, "0:;10,11,12,13,14;15,16,17,18,19;1:;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(1, 0, 3, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34")]

        public void TestSlice(int dim, int start, int count, string result)
        {
            t.FillWithRange_();
            t = t.Slice(dim, start, count);
            Assert.True(t.ContentsToString(true) == result);
        }

        [Theory]
        [InlineData(0, 1, 0, Padding.Const, -1, "0:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;1:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;2:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(0, 0, 1, Padding.Const, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;2:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1")]
        [InlineData(0, 1, 1, Padding.Const, -1, "0:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;1:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;2:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;3:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1")]
        [InlineData(0, 1, 0, Padding.Same, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;2:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(0, 0, 1, Padding.Same, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;2:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(0, 1, 1, Padding.Same, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;2:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;3:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(0, 2, 0, Padding.Const, -1, "0:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;1:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;2:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;3:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(0, 0, 2, Padding.Const, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;2:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;3:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1")]
        [InlineData(0, 2, 2, Padding.Const, -1, "0:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;1:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;2:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;3:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;4:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;5:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1")]
        [InlineData(0, 2, 0, Padding.Same, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;2:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;3:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(0, 0, 2, Padding.Same, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;2:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;3:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(0, 2, 2, Padding.Same, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;2:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;3:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;4:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;5:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(1, 1, 0, Padding.Const, -1, "0:;-1,-1,-1,-1,-1;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;-1,-1,-1,-1,-1;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(1, 0, 1, Padding.Const, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;-1,-1,-1,-1,-1;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;-1,-1,-1,-1,-1")]
        [InlineData(1, 1, 1, Padding.Const, -1, "0:;-1,-1,-1,-1,-1;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;-1,-1,-1,-1,-1;1:;-1,-1,-1,-1,-1;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;-1,-1,-1,-1,-1")]
        [InlineData(1, 1, 0, Padding.Same, -1, "0:;0,1,2,3,4;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;20,21,22,23,24;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(1, 0, 1, Padding.Same, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;15,16,17,18,19;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;35,36,37,38,39")]
        [InlineData(1, 1, 1, Padding.Same, -1, "0:;0,1,2,3,4;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;15,16,17,18,19;1:;20,21,22,23,24;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;35,36,37,38,39")]
        [InlineData(1, 2, 0, Padding.Const, -1, "0:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(1, 0, 2, Padding.Const, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1")]
        [InlineData(1, 2, 2, Padding.Const, -1, "0:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;1:;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;-1,-1,-1,-1,-1;-1,-1,-1,-1,-1")]
        [InlineData(1, 2, 0, Padding.Same, -1, "0:;0,1,2,3,4;0,1,2,3,4;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;1:;20,21,22,23,24;20,21,22,23,24;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39")]
        [InlineData(1, 0, 2, Padding.Same, -1, "0:;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;15,16,17,18,19;15,16,17,18,19;1:;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;35,36,37,38,39;35,36,37,38,39")]
        [InlineData(1, 2, 2, Padding.Same, -1, "0:;0,1,2,3,4;0,1,2,3,4;0,1,2,3,4;5,6,7,8,9;10,11,12,13,14;15,16,17,18,19;15,16,17,18,19;15,16,17,18,19;1:;20,21,22,23,24;20,21,22,23,24;20,21,22,23,24;25,26,27,28,29;30,31,32,33,34;35,36,37,38,39;35,36,37,38,39;35,36,37,38,39")]
        [InlineData(2, 1, 0, Padding.Const, -1, "0:;-1,0,1,2,3,4;-1,5,6,7,8,9;-1,10,11,12,13,14;-1,15,16,17,18,19;1:;-1,20,21,22,23,24;-1,25,26,27,28,29;-1,30,31,32,33,34;-1,35,36,37,38,39")]
        [InlineData(2, 0, 1, Padding.Const, -1, "0:;0,1,2,3,4,-1;5,6,7,8,9,-1;10,11,12,13,14,-1;15,16,17,18,19,-1;1:;20,21,22,23,24,-1;25,26,27,28,29,-1;30,31,32,33,34,-1;35,36,37,38,39,-1")]
        [InlineData(2, 1, 1, Padding.Const, -1, "0:;-1,0,1,2,3,4,-1;-1,5,6,7,8,9,-1;-1,10,11,12,13,14,-1;-1,15,16,17,18,19,-1;1:;-1,20,21,22,23,24,-1;-1,25,26,27,28,29,-1;-1,30,31,32,33,34,-1;-1,35,36,37,38,39,-1")]
        [InlineData(2, 1, 0, Padding.Same, -1, "0:;0,0,1,2,3,4;5,5,6,7,8,9;10,10,11,12,13,14;15,15,16,17,18,19;1:;20,20,21,22,23,24;25,25,26,27,28,29;30,30,31,32,33,34;35,35,36,37,38,39")]
        [InlineData(2, 0, 1, Padding.Same, -1, "0:;0,1,2,3,4,4;5,6,7,8,9,9;10,11,12,13,14,14;15,16,17,18,19,19;1:;20,21,22,23,24,24;25,26,27,28,29,29;30,31,32,33,34,34;35,36,37,38,39,39")]
        [InlineData(2, 1, 1, Padding.Same, -1, "0:;0,0,1,2,3,4,4;5,5,6,7,8,9,9;10,10,11,12,13,14,14;15,15,16,17,18,19,19;1:;20,20,21,22,23,24,24;25,25,26,27,28,29,29;30,30,31,32,33,34,34;35,35,36,37,38,39,39")]
        [InlineData(2, 2, 0, Padding.Const, -1, "0:;-1,-1,0,1,2,3,4;-1,-1,5,6,7,8,9;-1,-1,10,11,12,13,14;-1,-1,15,16,17,18,19;1:;-1,-1,20,21,22,23,24;-1,-1,25,26,27,28,29;-1,-1,30,31,32,33,34;-1,-1,35,36,37,38,39")]
        [InlineData(2, 0, 2, Padding.Const, -1, "0:;0,1,2,3,4,-1,-1;5,6,7,8,9,-1,-1;10,11,12,13,14,-1,-1;15,16,17,18,19,-1,-1;1:;20,21,22,23,24,-1,-1;25,26,27,28,29,-1,-1;30,31,32,33,34,-1,-1;35,36,37,38,39,-1,-1")]
        [InlineData(2, 2, 2, Padding.Const, -1, "0:;-1,-1,0,1,2,3,4,-1,-1;-1,-1,5,6,7,8,9,-1,-1;-1,-1,10,11,12,13,14,-1,-1;-1,-1,15,16,17,18,19,-1,-1;1:;-1,-1,20,21,22,23,24,-1,-1;-1,-1,25,26,27,28,29,-1,-1;-1,-1,30,31,32,33,34,-1,-1;-1,-1,35,36,37,38,39,-1,-1")]
        [InlineData(2, 2, 0, Padding.Same, -1, "0:;0,0,0,1,2,3,4;5,5,5,6,7,8,9;10,10,10,11,12,13,14;15,15,15,16,17,18,19;1:;20,20,20,21,22,23,24;25,25,25,26,27,28,29;30,30,30,31,32,33,34;35,35,35,36,37,38,39")]
        [InlineData(2, 0, 2, Padding.Same, -1, "0:;0,1,2,3,4,4,4;5,6,7,8,9,9,9;10,11,12,13,14,14,14;15,16,17,18,19,19,19;1:;20,21,22,23,24,24,24;25,26,27,28,29,29,29;30,31,32,33,34,34,34;35,36,37,38,39,39,39")]
        [InlineData(2, 2, 2, Padding.Same, -1, "0:;0,0,0,1,2,3,4,4,4;5,5,5,6,7,8,9,9,9;10,10,10,11,12,13,14,14,14;15,15,15,16,17,18,19,19,19;1:;20,20,20,21,22,23,24,24,24;25,25,25,26,27,28,29,29,29;30,30,30,31,32,33,34,34,34;35,35,35,36,37,38,39,39,39")]
        public void TestPad(int dim, int left, int right, Padding type, double value, string result)
        {
            t.FillWithRange_();
            t = t.Pad(dim, left, right, type, value);
            Assert.True(t.ContentsToString(true) == result);
        }
    }

    public class TensorFromDataTests
    {
        [Fact]
        public void TestCreateFromData()
        {
            var d = new double[] { 1, 2, 5, 5 };
            var t = new Tensor(d);
            Assert.True(t.ContentsToString(true) == "1,2,5,5");
        }
    }
}
